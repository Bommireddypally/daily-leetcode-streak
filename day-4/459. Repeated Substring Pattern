# 459. Repeated Substring Pattern
# Solved
# Easy
# Topics
# Companies
# Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

# Example 1:

# Input: s = "abab"
# Output: true
# Explanation: It is the substring "ab" twice.
# Example 2:

# Input: s = "aba"
# Output: false
# Example 3:

# Input: s = "abcabcabcabc"
# Output: true
# Explanation: It is the substring "abc" four times or the substring "abcabc" twice.
 

# Constraints:

# 1 <= s.length <= 104
# s consists of lowercase English letters.
class Solution(object):
    def repeatedSubstringPattern(self, s):
        """
        :type s: str
        :rtype: bool
        """
        n = len(s)  # Get the length of the string

    # Iterate over all possible lengths of the substring
        for length in range(1, n // 2 + 1):
        # Check if the current length can divide the total length
            if n % length == 0:
            # Extract the substring
                substring = s[:length]
            # Calculate how many times to repeat the substring
                repetitions = n // length
            # Construct the new string by repeating the substring
                constructed = substring * repetitions
            
            # Check if the constructed string matches the original
                if constructed == s:
                    return True  # Found a valid construction

        return False 
                
        
